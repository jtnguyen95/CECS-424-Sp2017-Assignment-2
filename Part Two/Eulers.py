#Jonathan Nguyen 012210040
#CECS 424 Assignment#2

#This program solves Eulers Problem #10.

#This method determines whether a number is prime by modulus-ing it by 2 to the number's square root. If n%x == 0
#it is not a prime number. Returns true otherwise.
def is_prime(num):
    if num == 2 or num == 3 or num == 5 or num == 7: #prime numbers
        return True
    if num == 1 or num%2 == 0: #not prime
        return False;
    for x in range (3, int(num**0.5)+1, 2): #checks range from 3-squareroot using only odd #s
        if num%x == 0:
            return False;
    return True; #returns true otherwise

#Runs is_prime infinitely and yields each prime number into a generator.
def get_primes(num):
    while True: #infinite loop
        if is_prime(num) == True:
            yield num; #adds number into the generator
        if(num < 3): #checks if prime < 3
            num += 1
        else: #only increments by 2 from 3 to avoid even numbers.
           num += 2

#Sums the prime numbers generated by get_primes(sum).
def sum_primes(num):
    sum = 0;
    generator = get_primes(num) #generator with prime #s
    x = next(generator)
    while(x < 2000000): #until the next prime number is > 2000000
        sum = sum + x #adds
        x = next(generator) #next prime
        print(sum) #prints sum each iteration

sum_primes(1)
